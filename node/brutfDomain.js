// Generated by CoffeeScript 1.10.0
(function() {
  (function() {
    'use strict';
    var cmdConvertDirectory, cmdConvertFileEncoding, cmdConvertFileFromEncoding, cmdGetFileEncoding, cmdGetFilesEncoding, fs, iconv, init, jschardet, path;
    fs = require('fs');
    iconv = require('iconv-lite');
    jschardet = require('jschardet');
    path = require('path');
    cmdGetFileEncoding = function(filePath) {
      var fileInfo;
      fileInfo = {};
      if (fs.existsSync(filePath)) {
        fileInfo = jschardet.detect(fs.readFileSync(filePath));
        fileInfo.name = path.basename(filePath);
        fileInfo.path = filePath;
        fileInfo.confidence *= 100;
        return fileInfo;
      }
      throw new Error('Error while getting file info. Invalid file path : ' + filePath);
    };
    cmdGetFilesEncoding = function(dirPath, dig) {
      var diggedFile, file, filePath, filename, i, j, len, len1, listFiles, lsDiggedFiles, lsFiles, ref;
      if (dig == null) {
        dig = false;
      }
      lsFiles = fs.readdirSync(dirPath);
      listFiles = [];
      if (dirPath !== /\/$/) {
        dirPath += '/';
      }
      for (i = 0, len = lsFiles.length; i < len; i++) {
        filename = lsFiles[i];
        if ((filename != null) && filename !== '.DS_Store' && filename !== /~$/ && filename !== '.svn') {
          filePath = dirPath + filename;
          if (!fs.lstatSync(filePath).isDirectory()) {
            file = cmdGetFileEncoding(filePath);
            listFiles.push(file);
          } else if (dig) {
            if (filePath !== /\/$/) {
              filePath += '/';
            }
            lsDiggedFiles = cmdGetFilesEncoding(filePath, dig);
            ref = lsDiggedFiles.files;
            for (j = 0, len1 = ref.length; j < len1; j++) {
              diggedFile = ref[j];
              listFiles.push(diggedFile);
            }
          }
        }
      }
      return {
        directory: dirPath,
        files: listFiles
      };
    };
    cmdConvertFileEncoding = function(filePath, fileDestination) {
      var file, fileDir, fileEncoding, fileExt, fileName, newFile, str, str_enc;
      file = fs.readFileSync(filePath);
      fileEncoding = jschardet.detect(file).encoding;
      if (fileEncoding == null) {
        return;
      }
      str = iconv.decode(file, jschardet.detect(file).encoding);
      str_enc = iconv.encode(str, 'utf8');
      fileExt = path.extname(filePath);
      fileName = path.basename(filePath, fileExt);
      if (fileDestination == null) {
        fileDir = path.dirname(filePath);
        if (fileDir !== /\/$/) {
          fileDir += '/';
        }
        newFile = fileDir + fileName + '.utf8' + fileExt;
      } else {
        newFile = fileDestination + fileName + fileExt;
      }
      fs.writeFileSync(newFile, str_enc);
      return newFile;
    };
    cmdConvertFileFromEncoding = function(filePath, fileOriginalEncoding) {
      var file, fileDir, fileExt, fileName, newFile, str, str_enc;
      if (!iconv.encodingExists(fileOriginalEncoding)) {
        console.log('Iconv can\'t decode with that encoding : ' + fileOriginalEncoding);
        return;
      }
      file = fs.readFileSync(filePath, {
        encoding: 'binary'
      });
      str = iconv.decode(file, fileOriginalEncoding);
      str_enc = iconv.encode(str, 'utf8');
      fileExt = path.extname(filePath);
      fileName = path.basename(filePath, fileExt);
      fileDir = path.dirname(filePath);
      if (fileDir !== /\/$/) {
        fileDir += '/';
      }
      newFile = fileDir + fileName + '.forced_utf8' + fileExt;
      fs.writeFileSync(newFile, str_enc);
      return newFile;
    };
    cmdConvertDirectory = function(dirPath, dig, isDigging) {
      var diggedFile, file, filePath, filename, folderDestination, i, j, k, l, len, len1, len2, len3, listFiles, lsDiggedFiles, lsFiles, newDirectory, ref, subFile, subItem, tabSubFile;
      if (dig == null) {
        dig = false;
      }
      if (isDigging == null) {
        isDigging = false;
      }
      lsFiles = fs.readdirSync(dirPath);
      listFiles = [];
      for (i = 0, len = lsFiles.length; i < len; i++) {
        filename = lsFiles[i];
        if ((filename != null) && filename !== '.DS_Store' && filename !== /~$/ && filename !== '.svn') {
          filePath = dirPath + filename;
          if (!fs.lstatSync(filePath).isDirectory()) {
            file = cmdGetFileEncoding(filePath);
            listFiles.push(file);
          } else if (dig) {
            if (filePath !== /\/$/) {
              filePath += '/';
            }
            lsDiggedFiles = cmdConvertDirectory(filePath, dig, true);
            ref = lsDiggedFiles.files;
            for (j = 0, len1 = ref.length; j < len1; j++) {
              diggedFile = ref[j];
              listFiles.push(diggedFile);
            }
          }
        }
      }
      if (!isDigging && listFiles.length > 0) {
        newDirectory = dirPath.substring(0, dirPath.lastIndexOf('/'));
        newDirectory += '.utf8/';
        if (!fs.existsSync(newDirectory)) {
          fs.mkdirSync(newDirectory);
        }
        for (k = 0, len2 = listFiles.length; k < len2; k++) {
          file = listFiles[k];
          subFile = file.path.replace(dirPath, "");
          folderDestination = newDirectory;
          tabSubFile = path.dirname(subFile).split('/');
          for (l = 0, len3 = tabSubFile.length; l < len3; l++) {
            subItem = tabSubFile[l];
            folderDestination += subItem + '/';
            if (!fs.existsSync(folderDestination)) {
              fs.mkdirSync(folderDestination);
            }
          }
          cmdConvertFileEncoding(file.path, folderDestination);
        }
      }
      return {
        files: listFiles
      };
    };
    init = function(DomainManager) {
      var domainName;
      domainName = 'bracketsUtfConverter';
      if (!DomainManager.hasDomain(domainName)) {
        DomainManager.registerDomain(domainName, {
          major: 0,
          minor: 1
        });
      }
      DomainManager.registerCommand(domainName, 'getFileEncoding', cmdGetFileEncoding, false, 'Return encoding file info', []);
      DomainManager.registerCommand(domainName, 'getFilesEncoding', cmdGetFilesEncoding, false, 'Return list of files with encoding', [
        {
          name: 'path',
          type: 'string',
          description: 'File path'
        }, {
          name: 'dig',
          type: 'boolean',
          description: 'allow digging through subfolders'
        }
      ]);
      DomainManager.registerCommand(domainName, 'convertDirectory', cmdConvertDirectory, false, 'Convert whole directories', [
        {
          name: 'path',
          type: 'string',
          description: 'File path'
        }, {
          name: 'dig',
          type: 'boolean',
          description: 'allow digging through subfolders'
        }
      ]);
      DomainManager.registerCommand(domainName, 'convertFileEncoding', cmdConvertFileEncoding, false, 'Create a UTF8 formated file', []);
      DomainManager.registerCommand(domainName, 'convertFileFromEncoding', cmdConvertFileFromEncoding, false, 'Create a UTF8 formated file from a specified encoding', [
        {
          name: 'path',
          type: 'string',
          description: 'File path'
        }, {
          name: 'encoding',
          type: 'string',
          description: 'File encoding'
        }
      ]);
    };
    exports.init = init;
  })();

}).call(this);
