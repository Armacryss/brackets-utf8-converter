// Generated by CoffeeScript 1.8.0
(function() {
  'use strict';
  var chardet, cmdConvertDirectory, cmdConvertFileEncoding, cmdGetFilesEncoding, fs, iconv, init, jschardet;
  fs = require('fs');
  iconv = require('iconv-lite');
  chardet = require('node-chardet');
  jschardet = require('jschardet');
  cmdGetFilesEncoding = function(dirPath, dig) {
    var diggedFile, file, filePath, filename, listFiles, lsDiggedFiles, lsFiles, _i, _j, _len, _len1, _ref;
    if (dig == null) {
      dig = false;
    }
    lsFiles = fs.readdirSync(dirPath);
    listFiles = [];
    for (_i = 0, _len = lsFiles.length; _i < _len; _i++) {
      filename = lsFiles[_i];
      if ((filename != null) && filename !== '.DS_Store' && filename !== /~$/) {
        filePath = dirPath + filename;
        if (!fs.lstatSync(filePath).isDirectory()) {
          file = jschardet.detect(fs.readFileSync(filePath));
          file.name = filename;
          file.path = filePath;
          file.confidence *= 100;
          listFiles.push(file);
        } else if (dig) {
          if (filePath !== /\/$/) {
            filePath += '/';
          }
          lsDiggedFiles = cmdGetFilesEncoding(filePath, dig);
          _ref = lsDiggedFiles.files;
          for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
            diggedFile = _ref[_j];
            listFiles.push(diggedFile);
          }
        }
      }
    }
    return {
      directory: dirPath,
      files: listFiles
    };
  };
  cmdConvertFileEncoding = function(filePath, fileDestination) {
    var file, fileDir, fileExt, fileName, newFile, str, str_enc;
    file = fs.readFileSync(filePath);
    str = iconv.decode(file, jschardet.detect(file).encoding);
    str_enc = iconv.encode(str, 'utf8');
    fileName = filePath.substring(filePath.lastIndexOf('/') + 1, filePath.lastIndexOf('.'));
    fileExt = filePath.substring(filePath.lastIndexOf('.'));
    if (fileDestination == null) {
      fileDir = filePath.substring(0, filePath.lastIndexOf('/') + 1);
      newFile = fileDir + fileName + '.utf8' + fileExt;
    } else {
      newFile = fileDestination + fileName + fileExt;
    }
    fs.writeFileSync(newFile, str_enc);
    return newFile;
  };
  cmdConvertDirectory = function(dirPath, dig, isDigging) {
    var diggedFile, file, filePath, filename, folderDestination, listFiles, lsDiggedFiles, lsFiles, newDirectory, subFile, subItem, tabSubFile, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref;
    if (dig == null) {
      dig = false;
    }
    if (isDigging == null) {
      isDigging = false;
    }
    lsFiles = fs.readdirSync(dirPath);
    listFiles = [];
    for (_i = 0, _len = lsFiles.length; _i < _len; _i++) {
      filename = lsFiles[_i];
      if ((filename != null) && filename !== '.DS_Store' && filename !== /~$/) {
        filePath = dirPath + filename;
        if (!fs.lstatSync(filePath).isDirectory()) {
          file = jschardet.detect(fs.readFileSync(filePath));
          file.name = filename;
          file.path = filePath;
          file.confidence *= 100;
          listFiles.push(file);
        } else if (dig) {
          if (filePath !== /\/$/) {
            filePath += '/';
          }
          lsDiggedFiles = cmdConvertDirectory(filePath, dig, true);
          _ref = lsDiggedFiles.files;
          for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
            diggedFile = _ref[_j];
            listFiles.push(diggedFile);
          }
        }
      }
    }
    if (!isDigging && listFiles.length > 0) {
      newDirectory = dirPath.substring(0, dirPath.lastIndexOf('/'));
      newDirectory += '.utf8/';
      if (!fs.existsSync(newDirectory)) {
        fs.mkdirSync(newDirectory);
      }
      for (_k = 0, _len2 = listFiles.length; _k < _len2; _k++) {
        file = listFiles[_k];
        subFile = file.path.replace(dirPath, "");
        folderDestination = newDirectory;
        tabSubFile = subFile.split('/');
        for (_l = 0, _len3 = tabSubFile.length; _l < _len3; _l++) {
          subItem = tabSubFile[_l];
          folderDestination += subItem + '/';
          if (!fs.existsSync(folderDestination)) {
            fs.mkdirSync(folderDestination);
          }
        }
        cmdConvertFileEncoding(file.path, folderDestination);
      }
    }
    return {
      files: listFiles
    };
  };
  init = function(DomainManager) {
    var domainName;
    domainName = 'bracketsUtfConverter';
    if (!DomainManager.hasDomain(domainName)) {
      DomainManager.registerDomain(domainName, {
        major: 0,
        minor: 1
      });
    }
    DomainManager.registerCommand(domainName, 'getFilesEncoding', cmdGetFilesEncoding, false, 'Return list of files with encoding', [
      {
        name: 'path',
        type: 'string',
        description: 'File path'
      }
    ]);
    DomainManager.registerCommand(domainName, 'convertDirectory', cmdConvertDirectory, false, 'Convert whole directories', [
      {
        name: 'path',
        type: 'string',
        description: 'File path'
      }, {
        name: 'dig',
        type: 'boolean',
        description: 'allow digging through subfolders'
      }
    ]);
    DomainManager.registerCommand(domainName, 'convertFileEncoding', cmdConvertFileEncoding, false, 'Create a UTF8 formated file', []);
  };
  exports.init = init;
})();
