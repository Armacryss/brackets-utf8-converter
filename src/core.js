// Generated by CoffeeScript 1.10.0
(function() {
  define(function(require, exports, module) {
    'use strict';
    var CommandManager, Dialogs, ExtensionUtils, Menus, NodeConnection, Preferences, ProjectManager, chain, convertDirectoryFromMenu, convertFile, convertSelectedFileFromMenu, detectEncoding, detectSingleFileEncoding, handleConvertEncodingFromMenu, handleConvertFromEncodingMenu, handleDetectEncoding, init, preferencesDialog, specificEncodingDialog, utfUI;
    ProjectManager = brackets.getModule('project/ProjectManager');
    ExtensionUtils = brackets.getModule('utils/ExtensionUtils');
    NodeConnection = brackets.getModule('utils/NodeConnection');
    Dialogs = brackets.getModule("widgets/Dialogs");
    Menus = brackets.getModule('command/Menus');
    CommandManager = brackets.getModule('command/CommandManager');
    utfUI = require('./ui');
    preferencesDialog = require('./preferencesdialog');
    specificEncodingDialog = require('./specificencodingdialog');
    Preferences = require('./preferences');
    this.currentItem;
    this.nodeConnection;
    chain = function() {
      var firstFunction, firstPromise, functions;
      functions = Array.prototype.slice.call(arguments, 0);
      if (functions.length > 0) {
        firstFunction = functions.shift();
        firstPromise = firstFunction.call();
        return firstPromise.done(function() {
          return chain.apply(null, functions);
        });
      }
    };
    init = (function(_this) {
      return function(mainModule) {
        var CONVERT_ENCODING_COMMAND_ID, CONVERT_FROM_ENCODING_COMMAND_ID, DETECT_ENCODING_COMMAND_ID, MAIN_TOOL_COMMAND_ID, PREFERENCES_ENCODING_COMMAND_ID, connect, loadUtfDomain, menu;
        _this.nodeConnection = new NodeConnection;
        connect = function() {
          var connectionPromise;
          connectionPromise = _this.nodeConnection.connect(true);
          connectionPromise.fail(function(err) {
            return console.error('[UTF8-Converter] failed to establish a connection with Node : ' + err);
          });
          return connectionPromise;
        };
        loadUtfDomain = function() {
          var loadPromise, path;
          path = ExtensionUtils.getModulePath(mainModule, 'node/brutfDomain');
          loadPromise = _this.nodeConnection.loadDomains([path], true);
          loadPromise.fail(function(err) {
            return console.log('[UTF8-Converter] failed to load domain : ' + err);
          });
          loadPromise.done(function() {
            return console.log('[UTF8-Converter] successfully loaded');
          });
          return loadPromise;
        };
        chain(connect, loadUtfDomain);
        MAIN_TOOL_COMMAND_ID = 'brutf_main_menu';
        DETECT_ENCODING_COMMAND_ID = 'brutf.detectEncoding';
        CONVERT_ENCODING_COMMAND_ID = 'brutf.goEncoding';
        PREFERENCES_ENCODING_COMMAND_ID = 'brutf.preferences';
        CONVERT_FROM_ENCODING_COMMAND_ID = 'brutf.encodeFrom';
        CommandManager.register('Detect Encoding', DETECT_ENCODING_COMMAND_ID, _this.handleDetectEncoding);
        CommandManager.register('Encoding Preferences', PREFERENCES_ENCODING_COMMAND_ID, preferencesDialog.show);
        CommandManager.register('Convert to UTF8 with specified encoding', CONVERT_FROM_ENCODING_COMMAND_ID, _this.handleConvertFromEncodingMenu);
        menu = Menus.getContextMenu(Menus.ContextMenuIds.PROJECT_MENU);
        menu.addMenuDivider();
        menu.addMenuItem(DETECT_ENCODING_COMMAND_ID);
        if (Preferences.get('allowAutoConvert')) {
          CommandManager.register('Convert to UTF8', CONVERT_ENCODING_COMMAND_ID, _this.handleConvertEncodingFromMenu);
          menu.addMenuItem(CONVERT_ENCODING_COMMAND_ID);
        }
        menu.addMenuItem(PREFERENCES_ENCODING_COMMAND_ID);
        menu.addMenuItem(CONVERT_FROM_ENCODING_COMMAND_ID);
      };
    })(this);
    convertFile = (function(_this) {
      return function() {
        var convertPromise;
        _this.currentItem = $(event.target);
        convertPromise = _this.nodeConnection.domains.bracketsUtfConverter.convertFileEncoding(_this.currentItem.data('file'));
        convertPromise.fail(function(err) {
          return console.log('[UTF8-Converter] failed to convert the file : ' + err);
        });
        return convertPromise.done(function(newFilePath) {
          console.log('[UTF8-Converter] converted a file');
          return _this.currentItem.html('Converted');
        });
      };
    })(this);
    detectEncoding = (function(_this) {
      return function() {
        var encodingPromise;
        encodingPromise = _this.nodeConnection.domains.bracketsUtfConverter.getFilesEncoding(ProjectManager.getSelectedItem()._path.toString(), Preferences.get('allowDigging'));
        encodingPromise.fail(function(err) {
          return console.error('[UTF8-Converter] failed to detect encoding of files', err);
        });
        encodingPromise.done(function(data) {
          return utfUI.showPanel(data.files);
        });
        return encodingPromise;
      };
    })(this);
    detectSingleFileEncoding = (function(_this) {
      return function() {
        var currentFile, encodingPromise;
        currentFile = ProjectManager.getSelectedItem()._path.toString();
        encodingPromise = _this.nodeConnection.domains.bracketsUtfConverter.getFileEncoding(currentFile);
        encodingPromise.fail(function(err) {
          return console.error('[UTF8-Converter] failed to detect encoding of file', err);
        });
        encodingPromise.done(function(data) {
          return utfUI.showPanel(data);
        });
        return encodingPromise;
      };
    })(this);
    convertDirectoryFromMenu = (function(_this) {
      return function() {
        var convertPromise, currentDirectory;
        currentDirectory = ProjectManager.getSelectedItem()._path.toString();
        convertPromise = _this.nodeConnection.domains.bracketsUtfConverter.convertDirectory(currentDirectory, Preferences.get('allowDigging'));
        convertPromise.fail(function(err) {
          return console.log('[UTF8-Converter] failed to convert the directory : ' + err);
        });
        convertPromise.done(function() {
          return console.log('[UTF8-Converter] converted a directory');
        });
        return convertPromise;
      };
    })(this);
    convertSelectedFileFromMenu = (function(_this) {
      return function() {
        var convertPromise, currentFile;
        currentFile = ProjectManager.getSelectedItem()._path.toString();
        convertPromise = _this.nodeConnection.domains.bracketsUtfConverter.convertFileEncoding(currentFile);
        convertPromise.fail(function(err) {
          return console.log('[UTF8-Converter] failed to convert the file : ' + err);
        });
        convertPromise.done(function() {
          return console.log('[UTF8-Converter] converted a file.');
        });
        return convertPromise;
      };
    })(this);
    handleDetectEncoding = function() {
      if (ProjectManager.getSelectedItem()._isDirectory) {
        chain(detectEncoding);
      } else {
        chain(detectSingleFileEncoding);
      }
    };
    handleConvertEncodingFromMenu = function() {
      if (ProjectManager.getSelectedItem()._isDirectory) {
        chain(convertDirectoryFromMenu);
      } else {
        chain(convertSelectedFileFromMenu);
      }
    };
    handleConvertFromEncodingMenu = (function(_this) {
      return function() {
        var currentFile;
        if (!ProjectManager.getSelectedItem()._isDirectory) {
          currentFile = ProjectManager.getSelectedItem()._path.toString();
          chain(specificEncodingDialog.show(_this.nodeConnection, currentFile));
        } else {
          console.log('[UTF8-Converter] cannot convert directory with specific encoding (yet)');
        }
      };
    })(this);
    exports.init = init;
    exports.convertFile = convertFile;
    exports.detectEncoding = detectEncoding;
    exports.handleDetectEncoding = handleDetectEncoding;
    exports.handleConvertEncodingFromMenu = handleConvertEncodingFromMenu;
    exports.handleConvertFromEncodingMenu = handleConvertFromEncodingMenu;
  });

}).call(this);
