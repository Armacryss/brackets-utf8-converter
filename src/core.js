// Generated by CoffeeScript 1.8.0
define(function(require, exports, module) {
  'use strict';
  var CommandManager, Dialogs, ExtensionUtils, Menus, NodeConnection, Preferences, ProjectManager, chain, convertFile, detectEncoding, handleDetectEncoding, init, preferencesDialog, utfUI;
  ProjectManager = brackets.getModule('project/ProjectManager');
  ExtensionUtils = brackets.getModule('utils/ExtensionUtils');
  NodeConnection = brackets.getModule('utils/NodeConnection');
  Dialogs = brackets.getModule("widgets/Dialogs");
  Menus = brackets.getModule('command/Menus');
  CommandManager = brackets.getModule('command/CommandManager');
  utfUI = require('./ui');
  preferencesDialog = require('./preferencesdialog');
  Preferences = require('./preferences');
  this.currentItem;
  this.nodeConnection;
  chain = function() {
    var firstFunction, firstPromise, functions;
    functions = Array.prototype.slice.call(arguments, 0);
    if (functions.length > 0) {
      firstFunction = functions.shift();
      firstPromise = firstFunction.call();
      return firstPromise.done(function() {
        return chain.apply(null, functions);
      });
    }
  };
  init = (function(_this) {
    return function(mainModule) {
      var DETECT_ENCODING_COMMAND_ID, MAIN_TOOL_COMMAND_ID, PREFERENCES_ENCODING_COMMAND_ID, connect, loadUtfDomain, menu;
      _this.nodeConnection = new NodeConnection;
      connect = function() {
        var connectionPromise;
        connectionPromise = _this.nodeConnection.connect(true);
        connectionPromise.fail(function() {
          return console.error('[UTF8-Converter] failed to establish a connection with Node');
        });
        return connectionPromise;
      };
      loadUtfDomain = function() {
        var loadPromise, path;
        path = ExtensionUtils.getModulePath(mainModule, 'node/brutfDomain');
        loadPromise = _this.nodeConnection.loadDomains([path], true);
        loadPromise.fail(function() {
          return console.log('[UTF8-Converter] failed to load domain');
        });
        loadPromise.done(function() {
          return console.log('[UTF8-Converter] successfully loaded');
        });
        return loadPromise;
      };
      chain(connect, loadUtfDomain);
      MAIN_TOOL_COMMAND_ID = 'brutf_main_menu';
      DETECT_ENCODING_COMMAND_ID = 'brutf.detectEncoding';
      PREFERENCES_ENCODING_COMMAND_ID = 'brutf.preferences';
      CommandManager.register('Detect Encoding', DETECT_ENCODING_COMMAND_ID, _this.handleDetectEncoding);
      CommandManager.register('Encoding Preferences', PREFERENCES_ENCODING_COMMAND_ID, preferencesDialog.show);
      menu = Menus.getContextMenu(Menus.ContextMenuIds.PROJECT_MENU);
      menu.addMenuDivider();
      menu.addMenuItem(DETECT_ENCODING_COMMAND_ID);
      menu.addMenuItem(PREFERENCES_ENCODING_COMMAND_ID);
    };
  })(this);
  convertFile = (function(_this) {
    return function() {
      var convertPromise;
      _this.currentItem = $(event.target);
      convertPromise = _this.nodeConnection.domains.bracketsUtfConverter.convertFileEncoding(_this.currentItem.data('file'));
      convertPromise.fail(function(err) {
        return console.log('[UTF8-Converter] failed to convert the file : ' + err);
      });
      return convertPromise.done(function(newFilePath) {
        console.log('[UTF8-Converter] converted a file');
        return _this.currentItem.html('Converted');
      });
    };
  })(this);
  detectEncoding = (function(_this) {
    return function() {
      var encodingPromise;
      encodingPromise = _this.nodeConnection.domains.bracketsUtfConverter.getFilesEncoding(ProjectManager.getSelectedItem()._path.toString(), Preferences.get('allowDigging'));
      encodingPromise.fail(function(err) {
        return console.error('[UTF8-Converter] failed to detect encoding of files', err);
      });
      encodingPromise.done(function(data) {
        return utfUI.showPanel(data.files);
      });
      return encodingPromise;
    };
  })(this);
  handleDetectEncoding = function() {
    if (ProjectManager.getSelectedItem()._isDirectory) {
      chain(detectEncoding);
    } else {
      Dialogs.showModalDialog('', 'UTF8-Converter', 'You must select a <b>directory</b> to detect encodings.<br />This extension doesn\'t work with a single files.');
    }
  };
  exports.init = init;
  exports.convertFile = convertFile;
  exports.detectEncoding = detectEncoding;
  exports.handleDetectEncoding = handleDetectEncoding;
});
