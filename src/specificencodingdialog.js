// Generated by CoffeeScript 1.10.0
(function() {
  define(function(require, exports) {
    var CommandManager, Dialogs, NodeConnection, collectValues, convertFileFromEncoding, dialogTemplate, init;
    CommandManager = brackets.getModule("command/CommandManager");
    Dialogs = brackets.getModule("widgets/Dialogs");
    dialogTemplate = require("text!templates/specific-encoding-dialog.html");
    NodeConnection = brackets.getModule('utils/NodeConnection');
    this.nodeConnection;
    this.dialog;
    this.$dialog;
    this.fileEncoding;
    this.file;
    collectValues = (function(_this) {
      return function() {
        _this.fileEncoding = $("*[specificEncodingProperty]", _this.$dialog).val().trim();
      };
    })(this);
    init = function() {};
    convertFileFromEncoding = (function(_this) {
      return function() {
        var convertPromise;
        convertPromise = _this.nodeConnection.domains.bracketsUtfConverter.convertFileFromEncoding(_this.file, _this.fileEncoding);
        convertPromise.fail(function(err) {
          return console.log('[UTF8-Converter] failed to convert the file : ' + err);
        });
        return convertPromise.done(function(newFilePath) {
          if (newFilePath != null) {
            return console.log('[UTF8-Converter] converted a file : ' + newFilePath);
          } else {
            return console.log('[UTF8-Converter] couldn\'t convert file : ' + _this.file);
          }
        });
      };
    })(this);
    exports.show = (function(_this) {
      return function(nodeConnection, file) {
        var compiledTemplate;
        compiledTemplate = Mustache.render(dialogTemplate);
        _this.dialog = Dialogs.showModalDialogUsingTemplate(compiledTemplate);
        _this.$dialog = _this.dialog.getElement();
        _this.file = file;
        _this.nodeConnection = nodeConnection;
        init();
        _this.dialog.done(function(buttonId) {
          if (buttonId === "ok") {
            collectValues();
            convertFileFromEncoding();
          }
        });
      };
    })(this);
  });

}).call(this);
